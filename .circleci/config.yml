version: 2.1 # Use 2.1 to enable using orbs and other features.

# Declare the orbs that we'll use in our config.
# read more about orbs: https://circleci.com/docs/2.0/orb-intro/
orbs:
  build-tools: circleci/build-tools@3.0.0
  jq: circleci/jq@2.2.0

jobs:
  rubocop:
    working_directory: ~/myapp1
    docker:
      - image: cimg/ruby:3.0.3
    parallelism: 1
    steps:
      - checkout
      - restore_cache:
          keys:
            - gem-cache-v1-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
            - gem-cache-v1-{{ .Branch }}-
            - gem-cache-v1-
      - run: bundle config --local path vendor/bundle
      - run:
          name: bundle install
          command: bundle check || bundle install --jobs=4 --clean
      - run:
          name: Run rubocop
          command: bundle exec rubocop --parallel
      - save_cache:
          key: gem-cache-v1-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle

  rspec:
    working_directory: ~/myapp1
    docker:
      - image: cimg/ruby:3.0.3
    parallelism: 1
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.11
      - run:
          name: Setup environment variable
          command: |
            echo "export COMPOSE_FILE=docker-compose.ci.yml" >> $BASH_ENV
      - run:
          name: Start containers and verify it is working
          command: |
            set -x
            docker-compose up -d
            sleep 30
            docker exec web_myapp1 curl -4 --retry 10 --retry-delay 3 --retry-connrefused http://localhost:3000
      - run:
          name: Setup database
          command: |
            docker-compose exec web bash -c 'bundle exec rake db:create'
            docker-compose exec web bash -c 'bundle exec rake db:schema:load'
      - run:
          name: Webpacker compile files
          command: |
            docker-compose exec web bash -c 'yarn install'
            docker-compose exec web bash -c 'RAILS_ENV=test bundle exec rails webpacker:compile'
      - run:
          name: Run rspec
          command: |
            mkdir /tmp/rspec-results
            docker-compose exec web rspec
      - store_test_results:
          path: /tmp/rspec-results

  deploy:
    working_directory: ~/myapp1
    docker:
      - image: sue445/heroku-cli
    steps:
      - checkout
      - build-tools/install-ci-tools
      - jq/install
      - run:
          name: Define Heroku app name to create
          command: timestamp=`date +%Y%m%d%H%M%S` && echo "export HEROKU_APP_NAME=myapp1-$timestamp" >> $BASH_ENV
      - run:
          name: Create fresh Heroku app
          command: heroku apps:create $HEROKU_APP_NAME --addons=jawsdb:kitefin
      - run:
          name: Deploy
          command: git push https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_APP_NAME.git HEAD:master
      - run:
          name: Run post-deploy tasks
          command: |
            heroku config:set AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY HEROKU_SUB_DOMAIN=$HEROKU_APP_NAME
            heroku run bin/rails db:migrate
            heroku addons:create mailgun:starter

# We use workflows to orchestrate the jobs that we declared above.
workflows:
  version: 2.1
  test_and_deploy:
    jobs:
      - rubocop
      - rspec:
          requires:
            - rubocop
      - deploy:
          requires:
            - rspec
